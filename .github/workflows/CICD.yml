name: PIPELINE-CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# This part is intentional and needs to be scanned for exposed secrets.
env:
  DOCKER_REGISTRY: brenesrm
  IMAGE_NAME: devsecops-nyit-van
  PASSWORD: "PuraVida!"

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-24.04

    steps:
      # 1. Checkout source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build & Push the Docker image
      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            APP_ENV=${{ secrets.APP_ENV }}

      # 4. Verify Docker image exists
      - name: Verify Docker image
        run: |
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  dockertest:
    name: Container Vulnerability Scanning Test
    needs: build
    runs-on: ubuntu-24.04
    steps:
      # 1. Scan Docker image
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'  # Optional: Limit to high-risk vulnerabilities

      # 2. Upload Trivy scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
       
  check-secrets:
    name: Secrets Management Analysis
    needs: dockertest
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install Detect Secrets
        run: pip install detect-secrets  # Ensure detect-secrets is installed

      - name: Generate Secrets Baseline (if missing)
        run: |
          if [ ! -f ".secrets.baseline" ]; then
            detect-secrets scan > .secrets.baseline
          fi

      - name: Secret Scanner
        run: detect-secrets scan --baseline .secrets.baseline || true  # Allow process to continue

  security_snyk:
    name: Dynamic Application Security Testing (DAST)
    needs: dockertest
    runs-on: ubuntu-latest

    steps:
      #- uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/docker@master
        #continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        with:
          image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  CodeAnalyze:
    name: Static Application Security Testing (SAST)
    needs: dockertest
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up CodeQL
      - name: Set up CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      # 3. Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # Log build activities
      - name: Log build to file
        if: always()
        run: |
          echo "Workflow: ${{ github.workflow }}" >> build_audit.log
          echo "Branch: ${{ github.ref }}" >> build_audit.log
          echo "Commit: ${{ github.sha }}" >> build_audit.log
          echo "Status: ${{ job.status }}" >> build_audit.log

      # Upload audit log as an artifact
      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: build-audit-log
          path: build_audit.log

# -----------------------------------------------------------
